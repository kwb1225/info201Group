<<<<<<< 6838c8e73a2845a49bbe1134d9b8ebe6aab1e4d9
<<<<<<< HEAD
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
install.packages("plotly")
library('plotly')
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
library('plotly')
library('ggplot2')
library('stats')
library('graphics')
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:knitr", unload=TRUE)
chart <- plot_ly(data, x = ~Bodywt, y = ~Brainwt, type = 'scatter',
mode = 'text', text = ~Primates, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Primates Brain and Body Weight',
xaxis = list(title = 'Body Weight (kg)',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Brain Weight (g)',
range = c(0,1400)))
library('plotly')
library('ggplot2')
library('stats')
library('graphics')
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
chart <- plot_ly(data, x = ~Bodywt, y = ~Brainwt, type = 'scatter',
mode = 'text', text = ~Primates, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Primates Brain and Body Weight',
xaxis = list(title = 'Body Weight (kg)',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Brain Weight (g)',
range = c(0,1400)))
library('plotly')
library('ggplot2')
library('stats')
library('graphics')
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
chart <- plot_ly(data, x = ~Bodywt, y = ~Brainwt, type = 'scatter',
mode = 'text', text = ~Primates, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Primates Brain and Body Weight',
xaxis = list(title = 'Body Weight (kg)',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Brain Weight (g)',
range = c(0,1400)))
View(chart)
View('chart')
View(chart)
View(chart)
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
chart <- plot_ly(data, x = ~Bodywt, y = ~Brainwt, type = 'scatter',
mode = 'text', text = ~Primates, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Primates Brain and Body Weight',
xaxis = list(title = 'Body Weight (kg)',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Brain Weight (g)',
range = c(0,1400)))
#install.packages("ggplot2")
#install.packages("stats")
#install.packages("graphics")
#install.packages("plotly")
library('plotly')
library('ggplot2')
library('stats')
library('graphics')
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
chart <- plot_ly(data, x = ~Bodywt, y = ~Brainwt, type = 'scatter',
mode = 'text', text = ~Primates, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Primates Brain and Body Weight',
xaxis = list(title = 'Body Weight (kg)',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Brain Weight (g)',
range = c(0,1400)))
install.packages("plotly")
library("plotly")
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
x <- c(1,2,3,4,5,6,7,8,9,0)
y <- c(0,9,8,7,6,5,4,3,2,1)
plot.data <- data.frame(x,y)
basic.scatterplot <- plot_ly(data = plot.data, x=x, y=y)
basic.scatterplot
```{r echo=FALSE, message=FALSE}
library(jsonlite)
library(dplyr)
library(knitr)
library(graphics)
# constructs a search query using authentification key.
github.user <- "mkfreeman"
base.url <- "http://api.github.com/search/users?"
access.token <- '9c890b61ca8f632b7f64266bf0b5d27e02cfa302'
request <- paste0(base.url, "q=", github.user, "&access_token=", access.token)
# creates a variable containing the data about the user from Github.
data <- fromJSON(request)
# requests to the Github API to get the user's repositories.
repository<- paste0("https://api.github.com/users/", github.user, "/repos")
# sorts the repositories in descending order.
sort <- 'created'
# sets the maximum number of repos returned to 100.
per_page <- '100'
# passes in access_token
repos.parameter <- paste0("?per_page=", per_page, "&sort=", sort, "&access_token=", access.token)
request.repos <- paste0(repository, repos.parameter)
user.repos <- fromJSON(request.repos)
# splits out columns which are dataframes into multiple columns.
flattened <- flatten(user.repos)
# creates a variable equal to the number of repositories returned.
num.repos <- nrow(flattened %>% group_by(name))
# creates a variable which is the name of the repository with the greatest number of forks.
most.popular <- filter(flattened, forks == max(forks)) %>% select(name)
```
# Username : `r github.user`
## This user has `r num.repos` in his repositories.
## "`r most.popular`" is the most popular repositories of his with the biggest number of forks
# <img src = https://avatars.githubusercontent.com/u/1373882?v=3 width = "100" height = "100" alt = "" align = center />
```{r echo=FALSE, message=FALSE}
# creates a column in the dataframe which stores the created date of the repository in a readable date format.
flattened <- flattened %>% mutate(created_on = created_at)
flattened$created_on <- substring(flattened$created_on, first = 0, last = 10)
# creates a new dataframe which contains only 4 columns of my choice from the above dataframe.
table.data <- data.frame(flattened[c(2:4, 88)])
# assigns more descriptive names to the columns in the newly made dataframe.
colnames(table.data)[1:4] <- paste("Mike's repos'", colnames(table.data[,c(1:4)]))
# displays a table of the newly made dataframe.
table <- kable(table.data)
# creates a summary table showing total number of repos and average number of forks for each language.
summary <- flattened %>% group_by(language) %>%
summarise(number.repos = n(), average.forks = mean(forks))
# creates a visual representation of a dataframe.
barplot(flattened)
barplot(flattened$forks, main = "Repos forks", xlab = "Name", ylab = "Number", names.arg=c(flattened$name), borders="blue")
shiny::runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
data.iris <- group_by(iris, Species)
View(data.iris)
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
BuildScatter <- function(data, species = '', part, color, xvar = 'width', yvar = 'length') {
plot_ly(data.iris, x = ~paste0(part, ".Width"), y = ~paste0(part, ".Length") %>%
layout(title = "Size of Iris", xaxis = list(title = "Width (inches)", zeroline = TRUE),
yaxis = list(title = "Length (inches)"))
}
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225')
runApp('Desktop/Info201/a8-building-apps-kwb1225')
runApp('Desktop/Info201/a8-building-apps-kwb1225')
runApp('Desktop/Info201/a8-building-apps-kwb1225')
runApp('Desktop/Info201/a8-building-apps-kwb1225')
library(shiny)
library(dplyr)
library(plotly)
data1 <- read.csv("data/governor_general_election_2016.csv", stringsAsFactors = FALSE)
data2 <- read.csv("data/senate_general_election_2016.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/Info201/info201Group")
data1 <- read.csv("data/governor_general_election_2016.csv", stringsAsFactors = FALSE)
data2 <- read.csv("data/senate_general_election_2016.csv", stringsAsFactors = FALSE)
df.gov1 <- data1 %>% select(state, name, rank, individual_party, votes, vote_pct) %>%
filter(rank == 1)
colnames(df.gov1)[2:6] <- paste("Governor", colnames(df.gov1[,c(2:6)]), sep = '.')
df.sen1 <- data2 %>% select(state, name, rank, individual_party, votes, vote_pct) %>%
filter(rank == 1)
colnames(df.sen1)[2:6] <- paste("Senator", colnames(df.sen1[,c(2:6)]), sep = '.')
data <- full_join(df.gov1, df.sen1)
BuildBar <- function(data, election) {
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar") %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar") %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
}
runApp()
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar") %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
runApp('~/Desktop/Info201/a8-building-apps-kwb1225')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/Info201/a8-building-apps-kwb1225')
runApp('~/Desktop/Info201/a8-building-apps-kwb1225')
runApp()
runApp('~/Desktop/Info201/a8-building-apps-kwb1225')
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party" == "D")) {
return ("blue")
} else if (paste0(election, ".individual_party" == "R")) {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
}
View(BuildBar)
BuildBar(data, "Governor")
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
}
# Renders a plotly object that returns your scatter.
shinyServer(function(input, output) {
output$bar <- renderPlotly({
return(BuildBar(data, input$election))
})
})
BuildBar(data, "Governor")
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return()
}
BuildBar(data,"Governor")
library(shiny)
library(dplyr)
library(plotly)
# Reads in a dataset, iris.
data1 <- read.csv("data/governor_general_election_2016.csv", stringsAsFactors = FALSE)
data2 <- read.csv("data/senate_general_election_2016.csv", stringsAsFactors = FALSE)
# Builds a scatter plot which shows the corresponding chart with the user's input.
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
}
# Renders a plotly object that returns your scatter.
shinyServer(function(input, output) {
output$bar <- renderPlotly({
return(BuildBar(data, input$election))
})
})
runApp('~/Desktop/Info201/Practice')
runApp('~/Desktop/Info201/Practice')
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
}
BuildBar("data", "Governor")
# Builds a scatter plot which shows the corresponding chart with the user's input.
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
q <- plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("data", "Governor")
# Builds a scatter plot which shows the corresponding chart with the user's input.
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
q <- plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("data", "Governor")
BuildBar <- function(data, election) {
if (election == "Governor") {
q <- plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("data", "Governor")
data <- as.data.frame(data)
BuildBar <- function(data, election) {
if (election == "Governor") {
q <- plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("data", "Governor")
BuildBar <- function(data, election) {
if (election == "Governor") {
q <- plot_ly(data = data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data = data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("data", "Governor")
BuildBar <- function(election) {
if (election == "Governor") {
q <- plot_ly(data = data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data = data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar(Governor")
BuildBar("Governor")
BuildBar("Governor")
BuildBar <- function(election) {
if (election == "Governor") {
q <- plot_ly(data = data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data = data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("Governor")
BuildBar <- function(election) {
if (election == "Governor") {
q <- plot_ly(data = data, x = ~state, y = ~Governor.vote_pct, type = "bar") %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data = data, x = ~state, y = ~Senator.vote_pct, type = "bar") %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("Governor")
BuildBar("Senator")
BuildBar <- function(election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
q <- plot_ly(data = data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data = data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("Governor")
View(data)
data$Governor.color <- data[grepl(D, data$Governor.individual_party), data$Governor.color]
data$Governor.color <- data[grepl(D, data$Governor.individual_party), data$Governor.individual_party]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), data$Governor.individual_party]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), data[as.integer(12)]]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), data[,as.integer(12)]]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), data[ ,as.integer(12)]]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), as.integer(12)]]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), as.integer(12)]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), as.integer(12)]
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
data$Governor.color <- data[grepl("D", data$Governor.individual_party), as.integer(12)]
test$Governor.color <- data[grepl("D", data$Governor.individual_party), as.integer(12)]
test <- data[grepl("D", data$Governor.individual_party), as.integer(12)]
test <- data[grepl("D", data$Governor.individual_party), as.integer(11)]
test <- data[grepl("D", data$Governor.individual_party), as.integer(11)]
BuildBar <- function(election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
q <- plot_ly(data = data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = election) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data = data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = election) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("Governor")
BuildBar("Governor")
runApp('~/Desktop/Info201/Practice')
runApp('~/Desktop/Info201/Practice')
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = election) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = election) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return()
}
BuildBar("Governor")
BuildBar("Senator")
=======
setwd("D:/Work/College Stuff/University of Washington/Informatics 201/clone/assignments/info201Group")
library(shiny)
library(dplyr)
library(plotly)
library(maps)
library(mapproj)
library(stringr)
library(ggplot2)
library(ggmap)
counties_rds <- readRDS("data/counties.rds")
votes_states <- read.csv("data/presidential_general_election_2016.csv", stringsAsFactors = FALSE)
votes_counties <- read.csv("data/presidential_general_election_2016_by_county.csv", stringsAsFactors = FALSE)
counties_test <- map_data("county")
states_test <- map_data("state")
modified_votes <- votes_counties %>%
filter(rank == "1") %>%
select(geo_name, name, rank, vote_pct, votes, state)
modified_votes$state <- tolower(modified_votes$state)
subregion <- tolower(modified_votes$geo_name) %>%
str_replace_all(" county", "")
modified_votes <- modified_votes %>%
mutate(subregion = subregion)
counties_test_new <- inner_join(counties_test, modified_votes, by = "subregion")
states_name_location <- aggregate(cbind(long, lat) ~ region, data = counties_test_new, FUN = function(x) mean(range(x)))
states_name_location <- as.data.frame(states_name_location)
counties_name_location <- aggregate(cbind(long, lat) ~subregion, data = counties_test_new, FUN = function(x) mean(range(x)))
counties_name_location <- as.data.frame(counties_name_location)
election_map <- function(state, county, candidate) {
if(candidate == "normal"){
p <- ggplot() +
coord_map() +
geom_polygon(data = counties_test_new, aes(x = long, y = lat, group = group, fill = name), color = "white") +
scale_fill_manual(name = "Candidate", values = c("tomato1", "steelblue1")) +
geom_polygon(data = states_test, mapping = aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_nothing(legend = TRUE)
} else {
if(county == "all"){
counties_test_new[grepl(state, counties_test_new$region), as.integer(8)] <- candidate
p <- ggplot() +
coord_map() +
geom_polygon(data = counties_test_new, aes(x = long, y = lat, group = group, fill = name), color = "white") +
scale_fill_manual(name = "Candidate", values = c("tomato1", "steelblue1")) +
geom_polygon(data = states_test, mapping = aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_nothing(legend = TRUE)
} else {
counties_test_new[grepl(county, counties_test_new$subregion), as.integer(8)] <- candidate
p <- ggplot() +
coord_map() +
geom_polygon(data = counties_test_new, aes(x = long, y = lat, group = group, fill = name), color = "white") +
scale_fill_manual(name = "Candidate", values = c("tomato1", "steelblue1")) +
geom_polygon(data = states_test, mapping = aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_nothing(legend = TRUE)
}
}
#Plotting the graph using the plotly functions
print(p)
}
election_chart <- function(state, candidate) {
if(candidate == "normal"){
chart_data <- counties_test_new[!duplicated(counties_test_new$subregion), ]
chart_data <- chart_data %>%
group_by(name) %>%
summarise(votes = sum(votes))
q <- plot_ly(chart_data, x = ~name, y = ~votes, type = 'bar', marker = list(color = c('rgba(222, 45, 38, 0.8)', 'rgb(49,130,189)')))
} else{
counties_test_new[grepl(state, counties_test_new$region), as.integer(8)] <- candidate
chart_data <- counties_test_new[!duplicated(counties_test_new$subregion), ]
chart_data <- chart_data %>%
group_by(name) %>%
summarise(votes = sum(votes))
q <- plot_ly(chart_data, x = ~name, y = ~votes, type = 'bar', marker = list(color = c('rgba(222, 45, 38, 0.8)', 'rgb(49,130,189)'))) #%>%
#layout(yaxis = list(title = 'Total'), barmode = 'group')
}
return(q)
}
election_map("california", "all", "D. Trump")
runApp('tab2trial')
runApp('tab2trial')
runApp('tab2trial')
runApp('tab2trial')
p <- ggplot() +
coord_map() +
geom_polygon(data = counties_test_new, aes(x = long, y = lat, group = group, fill = name), color = NA) +
scale_fill_manual(name = "Candidate", values = c("tomato1", "steelblue1")) +
geom_polygon(data = states_test, mapping = aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_nothing(legend = TRUE)
runApp('tab2trial')
runApp('tab2trial')
runApp('tab2trial')
as.character("NA")
>>>>>>> 3f570bc4e230515775c1160b3fdc4cd3f39b70d0
=======
library(dplyr)
# A function that takes in a username
GithubUser <- function(username) {
# Creates a variable 'key' that stores the api key
key <- '&api-key=04b6edaaab0ee10fd236070306874ef89438fd1e'
# Creates a variable 'base.url' that stores the base url
base.url <- 'https://api.github.com/'
# Creates a variable 'user.query' that is the path for the username passed in
user.query <- paste0('users/', username)
# Creates a variable 'request' that is the full url request
request <- paste0(base.url, user.query)
# Gets the user information using JSON to request it
user.info <- fromJSON(request, key)
# Creates the sort parameter, sorting the created property
sort <- '?sort=created'
# Creates the order parameter that sets whether the order is ascending or descending
order <- '&order=desc'
# Creates the page parameter that sets the amount per page
page <- '&per_page=100'
# Creates a variable parameters that is all the parameters combined
parameters <- paste0(sort, order, page)
# Creates a variable repo.info that is the repo url combined with the parameters
repo.info <- paste0(user.info$repos_url, parameters)
# Creates a variable repo.request that is requests the repo.info
repo.request <- fromJSON(repo.info)
# Creates a dataframe repo.df that is the repo.request
repo.df <- as.data.frame(repo.request)
# Creates a new dataframe that is repo.df flattened
flattened.repo <- flatten(repo.df)
# Creates a variable 'num.repos' that is the number of repositories returned
num.repos <- nrow(flattened.repo)
# Creates a variable 'most.popular' that has the name of the repository with the greatest number of forks
most.popular <- flattened.repo %>%
filter(forks_count == max(forks_count)) %>%
select(name)
link <- flattened.repo$owner.avatar_url
info <- list(username=username, num.repos=num.repos, most.popular=most.popular, link=link)
return (info)
}
```
```{r}
username <- 'mbostock'
info <- GithubUser(username)
```
## User Info
(`r info$link`)
The username we are currently looking at is `r username`. The creator `r username` has `r info$num.repos` repositories
on their account. The most popular repository of the `r info$num.repos` with the most forks was `r info$most.popular`.
---
title: "index"
author: "David Truong"
date: "10/30/2016"
output: html_document
---
```{r}
library(jsonlite)
library(dplyr)
# A function that takes in a username
GithubUser <- function(username) {
# Creates a variable 'key' that stores the api key
key <- '&api-key=04b6edaaab0ee10fd236070306874ef89438fd1e'
# Creates a variable 'base.url' that stores the base url
base.url <- 'https://api.github.com/'
# Creates a variable 'user.query' that is the path for the username passed in
user.query <- paste0('users/', username)
# Creates a variable 'request' that is the full url request
request <- paste0(base.url, user.query)
# Gets the user information using JSON to request it
user.info <- fromJSON(request, key)
# Creates the sort parameter, sorting the created property
sort <- '?sort=created'
# Creates the order parameter that sets whether the order is ascending or descending
order <- '&order=desc'
# Creates the page parameter that sets the amount per page
page <- '&per_page=100'
# Creates a variable parameters that is all the parameters combined
parameters <- paste0(sort, order, page)
# Creates a variable repo.info that is the repo url combined with the parameters
repo.info <- paste0(user.info$repos_url, parameters)
# Creates a variable repo.request that is requests the repo.info
repo.request <- fromJSON(repo.info)
# Creates a dataframe repo.df that is the repo.request
repo.df <- as.data.frame(repo.request)
# Creates a new dataframe that is repo.df flattened
flattened.repo <- flatten(repo.df)
# Creates a variable 'num.repos' that is the number of repositories returned
num.repos <- nrow(flattened.repo)
# Creates a variable 'most.popular' that has the name of the repository with the greatest number of forks
most.popular <- flattened.repo %>%
filter(forks_count == max(forks_count)) %>%
select(name)
link <- flattened.repo$owner.avatar_url
info <- list(username=username, num.repos=num.repos, most.popular=most.popular, link=link)
return (info)
}
```
```{r}
username <- 'mbostock'
info <- GithubUser(username)
```
## User Info
(`r info$link`)
The username we are currently looking at is `r username`. The creator `r username` has `r info$num.repos` repositories
on their account. The most popular repository of the `r info$num.repos` with the most forks was `r info$most.popular`.
---
title: "index"
author: "David Truong"
date: "10/30/2016"
output: html_document
---
```{r}
library(jsonlite)
library(dplyr)
# A function that takes in a username
GithubUser <- function(username) {
# Creates a variable 'key' that stores the api key
key <- '&api-key=04b6edaaab0ee10fd236070306874ef89438fd1e'
# Creates a variable 'base.url' that stores the base url
base.url <- 'https://api.github.com/'
# Creates a variable 'user.query' that is the path for the username passed in
user.query <- paste0('users/', username)
# Creates a variable 'request' that is the full url request
request <- paste0(base.url, user.query)
# Gets the user information using JSON to request it
user.info <- fromJSON(request, key)
# Creates the sort parameter, sorting the created property
sort <- '?sort=created'
# Creates the order parameter that sets whether the order is ascending or descending
order <- '&order=desc'
# Creates the page parameter that sets the amount per page
page <- '&per_page=100'
# Creates a variable parameters that is all the parameters combined
parameters <- paste0(sort, order, page)
# Creates a variable repo.info that is the repo url combined with the parameters
repo.info <- paste0(user.info$repos_url, parameters)
# Creates a variable repo.request that is requests the repo.info
repo.request <- fromJSON(repo.info)
# Creates a dataframe repo.df that is the repo.request
repo.df <- as.data.frame(repo.request)
# Creates a new dataframe that is repo.df flattened
flattened.repo <- flatten(repo.df)
# Creates a variable 'num.repos' that is the number of repositories returned
num.repos <- nrow(flattened.repo)
# Creates a variable 'most.popular' that has the name of the repository with the greatest number of forks
most.popular <- flattened.repo %>%
filter(forks_count == max(forks_count)) %>%
select(name)
link <- flattened.repo$owner.avatar_url
info <- list(username=username, num.repos=num.repos, most.popular=most.popular, link=link)
return (info)
}
```
```{r}
username <- 'mbostock'
info <- GithubUser(username)
```
## User Info
[![Profile Picture](`r info$link`)
The username we are currently looking at is `r username`. The creator `r username` has `r info$num.repos` repositories
on their account. The most popular repository of the `r info$num.repos` with the most forks was `r info$most.popular`.
install.packages("plotly")
library(plotly)
```{r}
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
```
---
title: "index"
author: "David Truong"
date: "11/1/2016"
output: html_document
---
# 2011 US Agriculture Exports by State
This map shows the amount of money that each state produces through different food sources.
```{r}
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
```
setwd("Users/David/Documents/INFO201/m12-plotly")
getwd()
setwd("Users/David/Documents/INFO201/m12-plotly")
setwd("Users/David/Documents")
---
title: "index"
author: "David Truong"
date: "11/1/2016"
output: html_document
---
# 2011 US Agriculture Exports by State
This map shows the amount of money that each state produces through different food sources.
```{r}
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
```
---
title: "index"
author: "David Truong"
date: "11/1/2016"
output: html_document
---
```{r}
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
```
# 2011 US Agriculture Exports by State
This map shows the amount of money that each state produces through different food sources.
# SET UP
# Install the 'dplyr' package
install.packages('dplyr')
library(dplyr)
# Reads in any_driving.csv into a variable called 'any.drinking'
any.drinking <- read.csv('data/any_drinking.csv')
# Reads in binge_drinking.csv into a variable called 'binge.drinking'
binge.drinking <- read.csv('data/binge_drinking.csv')
# ANY DRINKING DATA IN 2012
# Creates a data.frame 'data.2012' that has the state, location, and 2012 columns from 'any.drinking'
data.2012 <- select(any.drinking, state, location, both_sexes_2012, females_2012, males_2012)
# Adds a new column 'diff.drinking.paterrns' that is the difference in male and female drinking patterns
data.2012 <- mutate(data.2012, diff.drinking.patterns = males_2012 - females_2012)
(data.2012$diff.drinking.patterns < 0)
# Finds the location in which male and female drinking patterns are the most similar
most.similar.location <- data.2012 %>%
filter(diff.drinking.patterns == min(diff.drinking.patterns)) %>%
select(location)
# Finds the location in which the diff. in drinking patterns is the greatest
greatest.diff <- data.2012 %>%
filter(diff.drinking.patterns == max(diff.drinking.patterns)) %>%
select(location)
# Creates a .csv file 'Data2012' of the data.2012 data frame in the output directory
write.csv(data.2012, file = "Data2012.csv")
# Creates a new data frame that is only the state level observations within 2012
state.data.2012 <- select(data.2012, state, both_sexes_2012, females_2012, males_2012)
state.data.2012 <- state.data.2012[which(state.data.2012$state != 'National'), ]
# Finds the state with the highest drinking rate for both sexes combined
highest.drinking.rate <- state.data.2012 %>%
filter(both_sexes_2012 == max(both_sexes_2012)) %>%
select(state)
# Finds the state with the lowest drinking rate for both sexes combined
lowest.drinking.rate <- state.data.2012 %>%
filter(both_sexes_2012 == min(both_sexes_2012)) %>%
select(state)
# Finds the diff. in drinking for highest drinking rates for both sexes - lowest drinking rates for both sexes
diff.drinking <- state.data.2012 %>%
summarise(max(both_sexes_2012) - min(both_sexes_2012))
# Creates a .csv file 'StateData2012' of the data.2012 data frame in the output directory
write.csv(state.data.2012, file = "StateData2012.csv")
# Function that will create a dataframe of all info for the state that is passed in and write it into a .csv file
SingleState <- function(state.name) {
single.state <- data.2012 %>%
group_by(state) %>%
filter(state == state.name)
write.csv(single.state, paste(state.name, ".csv", sep = ""))
}
# EXPLORING BINGE DRINKING DATASET
# Creates a dataframe with only the county level observations
binge.data <- binge.drinking[which(binge.drinking$state != 'National'), ]
binge.data <- select(binge.data, location:males_2012)
# Adds 3 new columns which is the differences of both sexes, females, and males from 2002-2012
binge.data <- mutate(binge.data, both.diff = both_sexes_2012 - both_sexes_2002,
female.diff = females_2012 - females_2002, male.diff = males_2012 - males_2002)
# Finds the average county level of binge drinking in 2012 for both sexes
avg.county.level <- summarise(binge.data, both.mean = mean(both_sexes_2012))
# Finds the minimum county level of binge drinking in 2012
min.county.level <- filter(binge.data, both_sexes_2012 == min(both_sexes_2012)) %>%
select(both_sexes_2012)
# Finds the maximum county level of binge drinking in 2012
max.county.level <- filter(binge.data, both_sexes_2012 == max(both_sexes_2012)) %>%
select(both_sexes_2012)
# Finds the county with the largest increase in male binge drinking between 2002-2012
largest.male.binge.county <- filter(binge.data, male.diff == max(male.diff)) %>%
select(location)
# Finds the number of counties who had an increase in male binge drinking
num.increase.male.binge <- binge.data %>% filter(male.diff > 0) %>%
summarise(count = n())
# Finds the number of countries who had an increase in female binge drinking
num.increase.female.binge <- binge.data %>% filter(female.diff > 0) %>%
summarise(count = n())
# Finds the number of counties that experience a rise in female binge drinking and a decline in male binge drinking
female.rise.male.decline <- binge.data %>% filter(male.diff < 0 & female.diff > 0) %>%
summarise(count = n())
# JOINING DATA
# Adds any. prefix to all col names
colnames(any.drinking) <- paste("any.", colnames(any.drinking), sep = "")
colnames(binge.drinking) <- paste("binge.", colnames(binge.drinking), sep = "")
# Joins any_drinking and binge_drinking together
combined.drinking <- bind_cols(any.drinking, binge.drinking)
# Adds a new column 'diff.between.any.binge' that is the diff. in both sex drinking for any and binge drinking
combined.drinking <- mutate(combined.drinking, diff.between.any.binge = any.both_sexes_2012 - binge.both_sexes_2012)
# Finds the location with the greatest difference between any drinking and binge drinking
location.greatest.diff <- filter(combined.drinking, diff.between.any.binge == max(diff.between.any.binge)) %>%
select(any.location)
# Finds the location with the smallest difference between any drinking and binge drinking
location.smallest.diff <- filter(combined.drinking, diff.between.any.binge == min(diff.between.any.binge)) %>%
select(any.location)
# ASK YOUR OWN QUESTIONS
# Function that takes in a state and returns the highest drinking level for both sexes in 2012
Question <- function(state.name) {
# What is the highest drinking level for the state passed in in the both_sexes_2012 column?
state.greatest.drinking.level <- filter(any.drinking, any.state == state.name) %>%
select(any.both_sexes_2012) %>%
filter(any.both_sexes_2012 == max(any.both_sexes_2012))
return(state.greatest.drinking.level)
}
# Three tests to make sure function works
Question('Washington')
Question('California')
Question('Oregon')
# CHALLENGE
# The function takes in a state and a year and filters out to the drinking
# rates for the specified year and state then arranges them from decreasing
# to increasing order and writes it into a .csv with the name as the state and year
Challenge <- function(state.name, year) {
challenge.df <- filter(any.drinking, any.state == state.name) %>%
select(any.state, any.location, contains(year))
challenge.df <- arrange(challenge.df, challenge.df[[3]])
write.csv(challenge.df, file = paste(state.name, '_', year, '.csv'))
return(challenge.df)
}
setwd("Users/David/Documents/INFO201/a6-mapping-shootings-dtruon")
getwd()
setwd("Users/David/Documents/INFO201/a6-mapping-shootings-dtruon")
setwd("Users/David/Documents/INFO201/a6-mapping-shootings-dtruon")
setwd("~Documents/INFO201/a6-mapping-shootings-dtruon")
getwd()
setwd("Users/David/Documents")
shiny::runApp('Documents/INFO201/m14-shiny/exercise-4')
shiny::runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
?plot
?legend
install.packages('gapminder')
library(gapminder)
my.model <- lm(lifeExp ~ year, data=gapminder)
my.model
my.model
View(gapminder)
library(gapminder)
my.model <- lm(lifeExp ~ year, data=gapminder)
gapminder$yearsElapsed <- gapminder$year - 1952 lifeExp.model <- lm(lifeExp ~ yearsElapsed, data = gapminder)
library(gapminder)
my.model <- lm(lifeExp ~ year, data=gapminder)
gapminder$yearsElapsed <- gapminder$year - 1952
lifeExp.model <- lm(lifeExp ~ yearsElapsed, data = gapminder)
lifeExp.model
install.packages('modelr')
install.packages('tidyverse')
library(gapminder)
library(modelr)
library(tidyverse)
library(broom)
# Exercise-1
# Implement code from this book chapter: http://r4ds.had.co.nz/many-models.html
# Packages
# install.packages('modelr')
# install.packages('tidyverse')
# install.packages('gapminder')
library(gapminder)
library(modelr)
library(tidyverse)
library(broom)
# Initial view of the data with ggplot
ggplot(gapminder)
# Look only at new zealand
# Better yet, write your own function to accept a country as a parameter,
# and produce the same graphics
# Nest the data by country/continent
# Define a statistical model, and store it in a function
# Use the `map` functionality to run the same model for each country separately
# Add additional columns to store your residuals (distance between data and prediction)
# Unnest your residual
# Plot the residuals
# Plot residuals by continent
# Use `glance` to look at model quality
# Compare model quality to continent
# View country that have an r.squared value of less than .25
# Exercise-1
# Implement code from this book chapter: http://r4ds.had.co.nz/many-models.html
# Packages
# install.packages('modelr')
# install.packages('tidyverse')
# install.packages('gapminder')
library(gapminder)
library(modelr)
library(tidyverse)
library(broom)
# Initial view of the data with ggplot
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
# Look only at new zealand
# Better yet, write your own function to accept a country as a parameter,
# and produce the same graphics
# Nest the data by country/continent
# Define a statistical model, and store it in a function
# Use the `map` functionality to run the same model for each country separately
# Add additional columns to store your residuals (distance between data and prediction)
# Unnest your residual
# Plot the residuals
# Plot residuals by continent
# Use `glance` to look at model quality
# Compare model quality to continent
# View country that have an r.squared value of less than .25
ls()
install.packages("chloroplethr")
library(chloroplethr)
install.packages("maps")
library(chloroplethr)
install.packages("chloropleth")
version
presidential.county.data <- read.csv("presidential_primaries_2016_by_county.csv")
setwd("/Users/David/Documents/INFO201/info201Group/data")
presidential.county.data <- read.csv("presidential_primaries_2016_by_county.csv")
View(presidential.county.data)
president.county.data <- read.csv("presidential_primaries_2016_by_county.csv")
View(president.county.data)
getwd()
setwd("/Users/David/Documents/INFO201/info201Group")
>>>>>>> tab1
