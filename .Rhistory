<<<<<<< HEAD
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
install.packages("plotly")
library('plotly')
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
library('plotly')
library('ggplot2')
library('stats')
library('graphics')
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:knitr", unload=TRUE)
chart <- plot_ly(data, x = ~Bodywt, y = ~Brainwt, type = 'scatter',
mode = 'text', text = ~Primates, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Primates Brain and Body Weight',
xaxis = list(title = 'Body Weight (kg)',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Brain Weight (g)',
range = c(0,1400)))
library('plotly')
library('ggplot2')
library('stats')
library('graphics')
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
chart <- plot_ly(data, x = ~Bodywt, y = ~Brainwt, type = 'scatter',
mode = 'text', text = ~Primates, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Primates Brain and Body Weight',
xaxis = list(title = 'Body Weight (kg)',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Brain Weight (g)',
range = c(0,1400)))
library('plotly')
library('ggplot2')
library('stats')
library('graphics')
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
chart <- plot_ly(data, x = ~Bodywt, y = ~Brainwt, type = 'scatter',
mode = 'text', text = ~Primates, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Primates Brain and Body Weight',
xaxis = list(title = 'Body Weight (kg)',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Brain Weight (g)',
range = c(0,1400)))
View(chart)
View('chart')
View(chart)
View(chart)
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
chart <- plot_ly(data, x = ~Bodywt, y = ~Brainwt, type = 'scatter',
mode = 'text', text = ~Primates, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Primates Brain and Body Weight',
xaxis = list(title = 'Body Weight (kg)',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Brain Weight (g)',
range = c(0,1400)))
#install.packages("ggplot2")
#install.packages("stats")
#install.packages("graphics")
#install.packages("plotly")
library('plotly')
library('ggplot2')
library('stats')
library('graphics')
Primates <- c('Potar monkey', 'Gorilla', 'Human', 'Rhesus monkey', 'Chimp')
Bodywt <- c(10.0, 207.0, 62.0, 6.8, 52.2)
Brainwt <- c(115, 406, 1320, 179, 440)
data <- data.frame(Primates, Bodywt, Brainwt)
chart <- plot_ly(data, x = ~Bodywt, y = ~Brainwt, type = 'scatter',
mode = 'text', text = ~Primates, textposition = 'middle right',
textfont = list(color = '#000000', size = 16)) %>%
layout(title = 'Primates Brain and Body Weight',
xaxis = list(title = 'Body Weight (kg)',
zeroline = TRUE,
range = c(0, 250)),
yaxis = list(title = 'Brain Weight (g)',
range = c(0,1400)))
install.packages("plotly")
library("plotly")
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
x <- c(1,2,3,4,5,6,7,8,9,0)
y <- c(0,9,8,7,6,5,4,3,2,1)
plot.data <- data.frame(x,y)
basic.scatterplot <- plot_ly(data = plot.data, x=x, y=y)
basic.scatterplot
```{r echo=FALSE, message=FALSE}
library(jsonlite)
library(dplyr)
library(knitr)
library(graphics)
# constructs a search query using authentification key.
github.user <- "mkfreeman"
base.url <- "http://api.github.com/search/users?"
access.token <- '9c890b61ca8f632b7f64266bf0b5d27e02cfa302'
request <- paste0(base.url, "q=", github.user, "&access_token=", access.token)
# creates a variable containing the data about the user from Github.
data <- fromJSON(request)
# requests to the Github API to get the user's repositories.
repository<- paste0("https://api.github.com/users/", github.user, "/repos")
# sorts the repositories in descending order.
sort <- 'created'
# sets the maximum number of repos returned to 100.
per_page <- '100'
# passes in access_token
repos.parameter <- paste0("?per_page=", per_page, "&sort=", sort, "&access_token=", access.token)
request.repos <- paste0(repository, repos.parameter)
user.repos <- fromJSON(request.repos)
# splits out columns which are dataframes into multiple columns.
flattened <- flatten(user.repos)
# creates a variable equal to the number of repositories returned.
num.repos <- nrow(flattened %>% group_by(name))
# creates a variable which is the name of the repository with the greatest number of forks.
most.popular <- filter(flattened, forks == max(forks)) %>% select(name)
```
# Username : `r github.user`
## This user has `r num.repos` in his repositories.
## "`r most.popular`" is the most popular repositories of his with the biggest number of forks
# <img src = https://avatars.githubusercontent.com/u/1373882?v=3 width = "100" height = "100" alt = "" align = center />
```{r echo=FALSE, message=FALSE}
# creates a column in the dataframe which stores the created date of the repository in a readable date format.
flattened <- flattened %>% mutate(created_on = created_at)
flattened$created_on <- substring(flattened$created_on, first = 0, last = 10)
# creates a new dataframe which contains only 4 columns of my choice from the above dataframe.
table.data <- data.frame(flattened[c(2:4, 88)])
# assigns more descriptive names to the columns in the newly made dataframe.
colnames(table.data)[1:4] <- paste("Mike's repos'", colnames(table.data[,c(1:4)]))
# displays a table of the newly made dataframe.
table <- kable(table.data)
# creates a summary table showing total number of repos and average number of forks for each language.
summary <- flattened %>% group_by(language) %>%
summarise(number.repos = n(), average.forks = mean(forks))
# creates a visual representation of a dataframe.
barplot(flattened)
barplot(flattened$forks, main = "Repos forks", xlab = "Name", ylab = "Number", names.arg=c(flattened$name), borders="blue")
shiny::runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
data.iris <- group_by(iris, Species)
View(data.iris)
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
BuildScatter <- function(data, species = '', part, color, xvar = 'width', yvar = 'length') {
plot_ly(data.iris, x = ~paste0(part, ".Width"), y = ~paste0(part, ".Length") %>%
layout(title = "Size of Iris", xaxis = list(title = "Width (inches)", zeroline = TRUE),
yaxis = list(title = "Length (inches)"))
}
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225/a8')
runApp('Desktop/Info201/a8-building-apps-kwb1225')
runApp('Desktop/Info201/a8-building-apps-kwb1225')
runApp('Desktop/Info201/a8-building-apps-kwb1225')
runApp('Desktop/Info201/a8-building-apps-kwb1225')
runApp('Desktop/Info201/a8-building-apps-kwb1225')
library(shiny)
library(dplyr)
library(plotly)
data1 <- read.csv("data/governor_general_election_2016.csv", stringsAsFactors = FALSE)
data2 <- read.csv("data/senate_general_election_2016.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/Info201/info201Group")
data1 <- read.csv("data/governor_general_election_2016.csv", stringsAsFactors = FALSE)
data2 <- read.csv("data/senate_general_election_2016.csv", stringsAsFactors = FALSE)
df.gov1 <- data1 %>% select(state, name, rank, individual_party, votes, vote_pct) %>%
filter(rank == 1)
colnames(df.gov1)[2:6] <- paste("Governor", colnames(df.gov1[,c(2:6)]), sep = '.')
df.sen1 <- data2 %>% select(state, name, rank, individual_party, votes, vote_pct) %>%
filter(rank == 1)
colnames(df.sen1)[2:6] <- paste("Senator", colnames(df.sen1[,c(2:6)]), sep = '.')
data <- full_join(df.gov1, df.sen1)
BuildBar <- function(data, election) {
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar") %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar") %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
}
runApp()
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar") %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
runApp('~/Desktop/Info201/a8-building-apps-kwb1225')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/Info201/a8-building-apps-kwb1225')
runApp('~/Desktop/Info201/a8-building-apps-kwb1225')
runApp()
runApp('~/Desktop/Info201/a8-building-apps-kwb1225')
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party" == "D")) {
return ("blue")
} else if (paste0(election, ".individual_party" == "R")) {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
}
View(BuildBar)
BuildBar(data, "Governor")
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
}
# Renders a plotly object that returns your scatter.
shinyServer(function(input, output) {
output$bar <- renderPlotly({
return(BuildBar(data, input$election))
})
})
BuildBar(data, "Governor")
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return()
}
BuildBar(data,"Governor")
library(shiny)
library(dplyr)
library(plotly)
# Reads in a dataset, iris.
data1 <- read.csv("data/governor_general_election_2016.csv", stringsAsFactors = FALSE)
data2 <- read.csv("data/senate_general_election_2016.csv", stringsAsFactors = FALSE)
# Builds a scatter plot which shows the corresponding chart with the user's input.
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
}
# Renders a plotly object that returns your scatter.
shinyServer(function(input, output) {
output$bar <- renderPlotly({
return(BuildBar(data, input$election))
})
})
runApp('~/Desktop/Info201/Practice')
runApp('~/Desktop/Info201/Practice')
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
}
BuildBar("data", "Governor")
# Builds a scatter plot which shows the corresponding chart with the user's input.
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
q <- plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("data", "Governor")
# Builds a scatter plot which shows the corresponding chart with the user's input.
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
q <- plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("data", "Governor")
BuildBar <- function(data, election) {
if (election == "Governor") {
q <- plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("data", "Governor")
data <- as.data.frame(data)
BuildBar <- function(data, election) {
if (election == "Governor") {
q <- plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("data", "Governor")
BuildBar <- function(data, election) {
if (election == "Governor") {
q <- plot_ly(data = data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data = data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("data", "Governor")
BuildBar <- function(election) {
if (election == "Governor") {
q <- plot_ly(data = data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color, text = Governor.name, Governor.votes) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data = data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar(Governor")
BuildBar("Governor")
BuildBar("Governor")
BuildBar <- function(election) {
if (election == "Governor") {
q <- plot_ly(data = data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data = data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("Governor")
BuildBar <- function(election) {
if (election == "Governor") {
q <- plot_ly(data = data, x = ~state, y = ~Governor.vote_pct, type = "bar") %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data = data, x = ~state, y = ~Senator.vote_pct, type = "bar") %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("Governor")
BuildBar("Senator")
BuildBar <- function(election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
q <- plot_ly(data = data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data = data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = color) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("Governor")
View(data)
data$Governor.color <- data[grepl(D, data$Governor.individual_party), data$Governor.color]
data$Governor.color <- data[grepl(D, data$Governor.individual_party), data$Governor.individual_party]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), data$Governor.individual_party]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), data[as.integer(12)]]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), data[,as.integer(12)]]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), data[ ,as.integer(12)]]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), as.integer(12)]]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), as.integer(12)]
data$Governor.color <- data[grepl("D", data$Governor.individual_party), as.integer(12)]
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
data$Governor.color <- data[grepl("D", data$Governor.individual_party), as.integer(12)]
test$Governor.color <- data[grepl("D", data$Governor.individual_party), as.integer(12)]
test <- data[grepl("D", data$Governor.individual_party), as.integer(12)]
test <- data[grepl("D", data$Governor.individual_party), as.integer(11)]
test <- data[grepl("D", data$Governor.individual_party), as.integer(11)]
BuildBar <- function(election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
q <- plot_ly(data = data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = election) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
q <- plot_ly(data = data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = election) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return(q)
}
BuildBar("Governor")
BuildBar("Governor")
runApp('~/Desktop/Info201/Practice')
runApp('~/Desktop/Info201/Practice')
BuildBar <- function(data, election) {
color <- if (paste0(election, ".individual_party") == "D") {
return ("blue")
} else if (paste0(election, ".individual_party") == "R") {
return ("red")
} else {
return ("green")
}
if (election == "Governor") {
plot_ly(data, x = ~state, y = ~Governor.vote_pct, type = "bar", color = election) %>%
layout(title = "2016 Governor Election", yaxis = list(title = "Votes in %"))
} else {
plot_ly(data, x = ~state, y = ~Senator.vote_pct, type = "bar", color = election) %>%
layout(title = "2016 Senator Election", yaxis = list(title = "Votes in %"))
}
return()
}
BuildBar("Governor")
BuildBar("Senator")
=======
setwd("D:/Work/College Stuff/University of Washington/Informatics 201/clone/assignments/info201Group")
library(shiny)
library(dplyr)
library(plotly)
library(maps)
library(mapproj)
library(stringr)
library(ggplot2)
library(ggmap)
counties_rds <- readRDS("data/counties.rds")
votes_states <- read.csv("data/presidential_general_election_2016.csv", stringsAsFactors = FALSE)
votes_counties <- read.csv("data/presidential_general_election_2016_by_county.csv", stringsAsFactors = FALSE)
counties_test <- map_data("county")
states_test <- map_data("state")
modified_votes <- votes_counties %>%
filter(rank == "1") %>%
select(geo_name, name, rank, vote_pct, votes, state)
modified_votes$state <- tolower(modified_votes$state)
subregion <- tolower(modified_votes$geo_name) %>%
str_replace_all(" county", "")
modified_votes <- modified_votes %>%
mutate(subregion = subregion)
counties_test_new <- inner_join(counties_test, modified_votes, by = "subregion")
states_name_location <- aggregate(cbind(long, lat) ~ region, data = counties_test_new, FUN = function(x) mean(range(x)))
states_name_location <- as.data.frame(states_name_location)
counties_name_location <- aggregate(cbind(long, lat) ~subregion, data = counties_test_new, FUN = function(x) mean(range(x)))
counties_name_location <- as.data.frame(counties_name_location)
election_map <- function(state, county, candidate) {
if(candidate == "normal"){
p <- ggplot() +
coord_map() +
geom_polygon(data = counties_test_new, aes(x = long, y = lat, group = group, fill = name), color = "white") +
scale_fill_manual(name = "Candidate", values = c("tomato1", "steelblue1")) +
geom_polygon(data = states_test, mapping = aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_nothing(legend = TRUE)
} else {
if(county == "all"){
counties_test_new[grepl(state, counties_test_new$region), as.integer(8)] <- candidate
p <- ggplot() +
coord_map() +
geom_polygon(data = counties_test_new, aes(x = long, y = lat, group = group, fill = name), color = "white") +
scale_fill_manual(name = "Candidate", values = c("tomato1", "steelblue1")) +
geom_polygon(data = states_test, mapping = aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_nothing(legend = TRUE)
} else {
counties_test_new[grepl(county, counties_test_new$subregion), as.integer(8)] <- candidate
p <- ggplot() +
coord_map() +
geom_polygon(data = counties_test_new, aes(x = long, y = lat, group = group, fill = name), color = "white") +
scale_fill_manual(name = "Candidate", values = c("tomato1", "steelblue1")) +
geom_polygon(data = states_test, mapping = aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_nothing(legend = TRUE)
}
}
#Plotting the graph using the plotly functions
print(p)
}
election_chart <- function(state, candidate) {
if(candidate == "normal"){
chart_data <- counties_test_new[!duplicated(counties_test_new$subregion), ]
chart_data <- chart_data %>%
group_by(name) %>%
summarise(votes = sum(votes))
q <- plot_ly(chart_data, x = ~name, y = ~votes, type = 'bar', marker = list(color = c('rgba(222, 45, 38, 0.8)', 'rgb(49,130,189)')))
} else{
counties_test_new[grepl(state, counties_test_new$region), as.integer(8)] <- candidate
chart_data <- counties_test_new[!duplicated(counties_test_new$subregion), ]
chart_data <- chart_data %>%
group_by(name) %>%
summarise(votes = sum(votes))
q <- plot_ly(chart_data, x = ~name, y = ~votes, type = 'bar', marker = list(color = c('rgba(222, 45, 38, 0.8)', 'rgb(49,130,189)'))) #%>%
#layout(yaxis = list(title = 'Total'), barmode = 'group')
}
return(q)
}
election_map("california", "all", "D. Trump")
runApp('tab2trial')
runApp('tab2trial')
runApp('tab2trial')
runApp('tab2trial')
p <- ggplot() +
coord_map() +
geom_polygon(data = counties_test_new, aes(x = long, y = lat, group = group, fill = name), color = NA) +
scale_fill_manual(name = "Candidate", values = c("tomato1", "steelblue1")) +
geom_polygon(data = states_test, mapping = aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_nothing(legend = TRUE)
runApp('tab2trial')
runApp('tab2trial')
runApp('tab2trial')
as.character("NA")
>>>>>>> 3f570bc4e230515775c1160b3fdc4cd3f39b70d0
