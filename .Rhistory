title: "index"
author: "David Truong"
date: "11/1/2016"
output: html_document
---
# 2011 US Agriculture Exports by State
This map shows the amount of money that each state produces through different food sources.
```{r}
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
```
---
title: "index"
author: "David Truong"
date: "11/1/2016"
output: html_document
---
```{r}
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
```
# 2011 US Agriculture Exports by State
This map shows the amount of money that each state produces through different food sources.
# SET UP
# Install the 'dplyr' package
install.packages('dplyr')
library(dplyr)
# Reads in any_driving.csv into a variable called 'any.drinking'
any.drinking <- read.csv('data/any_drinking.csv')
# Reads in binge_drinking.csv into a variable called 'binge.drinking'
binge.drinking <- read.csv('data/binge_drinking.csv')
# ANY DRINKING DATA IN 2012
# Creates a data.frame 'data.2012' that has the state, location, and 2012 columns from 'any.drinking'
data.2012 <- select(any.drinking, state, location, both_sexes_2012, females_2012, males_2012)
# Adds a new column 'diff.drinking.paterrns' that is the difference in male and female drinking patterns
data.2012 <- mutate(data.2012, diff.drinking.patterns = males_2012 - females_2012)
(data.2012$diff.drinking.patterns < 0)
# Finds the location in which male and female drinking patterns are the most similar
most.similar.location <- data.2012 %>%
filter(diff.drinking.patterns == min(diff.drinking.patterns)) %>%
select(location)
# Finds the location in which the diff. in drinking patterns is the greatest
greatest.diff <- data.2012 %>%
filter(diff.drinking.patterns == max(diff.drinking.patterns)) %>%
select(location)
# Creates a .csv file 'Data2012' of the data.2012 data frame in the output directory
write.csv(data.2012, file = "Data2012.csv")
# Creates a new data frame that is only the state level observations within 2012
state.data.2012 <- select(data.2012, state, both_sexes_2012, females_2012, males_2012)
state.data.2012 <- state.data.2012[which(state.data.2012$state != 'National'), ]
# Finds the state with the highest drinking rate for both sexes combined
highest.drinking.rate <- state.data.2012 %>%
filter(both_sexes_2012 == max(both_sexes_2012)) %>%
select(state)
# Finds the state with the lowest drinking rate for both sexes combined
lowest.drinking.rate <- state.data.2012 %>%
filter(both_sexes_2012 == min(both_sexes_2012)) %>%
select(state)
# Finds the diff. in drinking for highest drinking rates for both sexes - lowest drinking rates for both sexes
diff.drinking <- state.data.2012 %>%
summarise(max(both_sexes_2012) - min(both_sexes_2012))
# Creates a .csv file 'StateData2012' of the data.2012 data frame in the output directory
write.csv(state.data.2012, file = "StateData2012.csv")
# Function that will create a dataframe of all info for the state that is passed in and write it into a .csv file
SingleState <- function(state.name) {
single.state <- data.2012 %>%
group_by(state) %>%
filter(state == state.name)
write.csv(single.state, paste(state.name, ".csv", sep = ""))
}
# EXPLORING BINGE DRINKING DATASET
# Creates a dataframe with only the county level observations
binge.data <- binge.drinking[which(binge.drinking$state != 'National'), ]
binge.data <- select(binge.data, location:males_2012)
# Adds 3 new columns which is the differences of both sexes, females, and males from 2002-2012
binge.data <- mutate(binge.data, both.diff = both_sexes_2012 - both_sexes_2002,
female.diff = females_2012 - females_2002, male.diff = males_2012 - males_2002)
# Finds the average county level of binge drinking in 2012 for both sexes
avg.county.level <- summarise(binge.data, both.mean = mean(both_sexes_2012))
# Finds the minimum county level of binge drinking in 2012
min.county.level <- filter(binge.data, both_sexes_2012 == min(both_sexes_2012)) %>%
select(both_sexes_2012)
# Finds the maximum county level of binge drinking in 2012
max.county.level <- filter(binge.data, both_sexes_2012 == max(both_sexes_2012)) %>%
select(both_sexes_2012)
# Finds the county with the largest increase in male binge drinking between 2002-2012
largest.male.binge.county <- filter(binge.data, male.diff == max(male.diff)) %>%
select(location)
# Finds the number of counties who had an increase in male binge drinking
num.increase.male.binge <- binge.data %>% filter(male.diff > 0) %>%
summarise(count = n())
# Finds the number of countries who had an increase in female binge drinking
num.increase.female.binge <- binge.data %>% filter(female.diff > 0) %>%
summarise(count = n())
# Finds the number of counties that experience a rise in female binge drinking and a decline in male binge drinking
female.rise.male.decline <- binge.data %>% filter(male.diff < 0 & female.diff > 0) %>%
summarise(count = n())
# JOINING DATA
# Adds any. prefix to all col names
colnames(any.drinking) <- paste("any.", colnames(any.drinking), sep = "")
colnames(binge.drinking) <- paste("binge.", colnames(binge.drinking), sep = "")
# Joins any_drinking and binge_drinking together
combined.drinking <- bind_cols(any.drinking, binge.drinking)
# Adds a new column 'diff.between.any.binge' that is the diff. in both sex drinking for any and binge drinking
combined.drinking <- mutate(combined.drinking, diff.between.any.binge = any.both_sexes_2012 - binge.both_sexes_2012)
# Finds the location with the greatest difference between any drinking and binge drinking
location.greatest.diff <- filter(combined.drinking, diff.between.any.binge == max(diff.between.any.binge)) %>%
select(any.location)
# Finds the location with the smallest difference between any drinking and binge drinking
location.smallest.diff <- filter(combined.drinking, diff.between.any.binge == min(diff.between.any.binge)) %>%
select(any.location)
# ASK YOUR OWN QUESTIONS
# Function that takes in a state and returns the highest drinking level for both sexes in 2012
Question <- function(state.name) {
# What is the highest drinking level for the state passed in in the both_sexes_2012 column?
state.greatest.drinking.level <- filter(any.drinking, any.state == state.name) %>%
select(any.both_sexes_2012) %>%
filter(any.both_sexes_2012 == max(any.both_sexes_2012))
return(state.greatest.drinking.level)
}
# Three tests to make sure function works
Question('Washington')
Question('California')
Question('Oregon')
# CHALLENGE
# The function takes in a state and a year and filters out to the drinking
# rates for the specified year and state then arranges them from decreasing
# to increasing order and writes it into a .csv with the name as the state and year
Challenge <- function(state.name, year) {
challenge.df <- filter(any.drinking, any.state == state.name) %>%
select(any.state, any.location, contains(year))
challenge.df <- arrange(challenge.df, challenge.df[[3]])
write.csv(challenge.df, file = paste(state.name, '_', year, '.csv'))
return(challenge.df)
}
setwd("Users/David/Documents/INFO201/a6-mapping-shootings-dtruon")
getwd()
setwd("Users/David/Documents/INFO201/a6-mapping-shootings-dtruon")
setwd("Users/David/Documents/INFO201/a6-mapping-shootings-dtruon")
setwd("~Documents/INFO201/a6-mapping-shootings-dtruon")
getwd()
setwd("Users/David/Documents")
shiny::runApp('Documents/INFO201/m14-shiny/exercise-4')
shiny::runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
runApp('Documents/INFO201/a8-building-apps-dtruon')
?plot
?legend
install.packages('gapminder')
library(gapminder)
my.model <- lm(lifeExp ~ year, data=gapminder)
my.model
my.model
View(gapminder)
library(gapminder)
my.model <- lm(lifeExp ~ year, data=gapminder)
gapminder$yearsElapsed <- gapminder$year - 1952 lifeExp.model <- lm(lifeExp ~ yearsElapsed, data = gapminder)
library(gapminder)
my.model <- lm(lifeExp ~ year, data=gapminder)
gapminder$yearsElapsed <- gapminder$year - 1952
lifeExp.model <- lm(lifeExp ~ yearsElapsed, data = gapminder)
lifeExp.model
install.packages('modelr')
install.packages('tidyverse')
library(gapminder)
library(modelr)
library(tidyverse)
library(broom)
# Exercise-1
# Implement code from this book chapter: http://r4ds.had.co.nz/many-models.html
# Packages
# install.packages('modelr')
# install.packages('tidyverse')
# install.packages('gapminder')
library(gapminder)
library(modelr)
library(tidyverse)
library(broom)
# Initial view of the data with ggplot
ggplot(gapminder)
# Look only at new zealand
# Better yet, write your own function to accept a country as a parameter,
# and produce the same graphics
# Nest the data by country/continent
# Define a statistical model, and store it in a function
# Use the `map` functionality to run the same model for each country separately
# Add additional columns to store your residuals (distance between data and prediction)
# Unnest your residual
# Plot the residuals
# Plot residuals by continent
# Use `glance` to look at model quality
# Compare model quality to continent
# View country that have an r.squared value of less than .25
# Exercise-1
# Implement code from this book chapter: http://r4ds.had.co.nz/many-models.html
# Packages
# install.packages('modelr')
# install.packages('tidyverse')
# install.packages('gapminder')
library(gapminder)
library(modelr)
library(tidyverse)
library(broom)
# Initial view of the data with ggplot
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
# Look only at new zealand
# Better yet, write your own function to accept a country as a parameter,
# and produce the same graphics
# Nest the data by country/continent
# Define a statistical model, and store it in a function
# Use the `map` functionality to run the same model for each country separately
# Add additional columns to store your residuals (distance between data and prediction)
# Unnest your residual
# Plot the residuals
# Plot residuals by continent
# Use `glance` to look at model quality
# Compare model quality to continent
# View country that have an r.squared value of less than .25
ls()
install.packages("chloroplethr")
library(chloroplethr)
install.packages("maps")
library(chloroplethr)
install.packages("chloropleth")
version
library(shiny)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
shinyServer(function(input, output) {
output$map <- renderPlot({
# Reads in the data into a .csv
setwd("/Users/David/Documents/INFO201/info201Group")
presidential.county.data <- read.csv("data/presidential_general_election_2016_by_county_David.csv")
# Creates a vector of the two candidates
candidates <- c("H. Clinton", "D. Trump")
# Creates a new dataframe of the filtere
main.candidates <- presidential.county.data %>%
filter(name %in% candidates)
# Creates a sub-list of National, and sub-list of States into one list of choices
all.choices <- list("National" = "national", States = unique(main.candidates$state))
# Condenses the data to get rid of duplicates
main.candidates.condensed <- dcast(main.candidates, fips + geo_name + state ~ name, sum)
# Renames the 'fips' column to 'region'
names(main.candidates.condensed)[1] <- "region"
# Renames the 'D. Trump' column to 'trump'
names(main.candidates.condensed)[4] <- "trump"
# Renames the 'H. Clinton' column to 'clinton'
names(main.candidates.condensed)[5] <- "clinton"
# Adds a new column that is the total amount of votes for Trump & Clinton
main.candidates.condensed <- mutate(main.candidates.condensed, total = trump + clinton)
# Adds two new columns that is the percentages of votes for Trump and for Clinton
main.candidates.condensed <- mutate(main.candidates.condensed, trump_pct = round((trump/total)*100),
clinton_pct = round((clinton/total) * 100))
# Sets the county names to lowercase to match the county.regions data
main.candidates.condensed$geo_name <- tolower(as.character(main.candidates.condensed$geo_name))
# Gets rid of 'county' and leaves only the name of the county to match the county.regions data
main.candidates.condensed$geo_name <- gsub(' [A-z ]*', '' , main.candidates.condensed$geo_name)
# Loads county.regions data
data("county.regions")
# Creates a new variable 'all.regions' that is only the county.names and fips codes
all.regions <- select(county.regions, 'geo_name' = county.name, 'region' = region)
# Joins all.regions with main.candidates.condensed
df <- left_join(main.candidates.condensed, all.regions)
names(df)[2] <- "county"
# Sets the fips of Olgaga county to '46113' because it was the wrong fips code
df[2383, "region"] <- 46113
# Add a new column to show each county's winner
df$winner <- as.factor(ifelse(df$trump_pct > df$clinton_pct, "Trump", "Clinton"))
# Creates a column named 'value' that is the 'winner' column
df$value = df$winner
library(shiny)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(shiny)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
shinyServer(function(input, output) {
output$map <- renderPlot({
# Reads in the data into a .csv
setwd("/Users/David/Documents/INFO201/info201Group")
presidential.county.data <- read.csv("data/presidential_general_election_2016_by_county_David.csv")
# Creates a vector of the two candidates
candidates <- c("H. Clinton", "D. Trump")
# Creates a new dataframe of the filtere
main.candidates <- presidential.county.data %>%
filter(name %in% candidates)
# Creates a sub-list of National, and sub-list of States into one list of choices
all.choices <- list("National" = "national", States = unique(main.candidates$state))
# Condenses the data to get rid of duplicates
main.candidates.condensed <- dcast(main.candidates, fips + geo_name + state ~ name, sum)
# Renames the 'fips' column to 'region'
names(main.candidates.condensed)[1] <- "region"
# Renames the 'D. Trump' column to 'trump'
names(main.candidates.condensed)[4] <- "trump"
# Renames the 'H. Clinton' column to 'clinton'
names(main.candidates.condensed)[5] <- "clinton"
# Adds a new column that is the total amount of votes for Trump & Clinton
main.candidates.condensed <- mutate(main.candidates.condensed, total = trump + clinton)
# Adds two new columns that is the percentages of votes for Trump and for Clinton
main.candidates.condensed <- mutate(main.candidates.condensed, trump_pct = round((trump/total)*100),
clinton_pct = round((clinton/total) * 100))
# Sets the county names to lowercase to match the county.regions data
main.candidates.condensed$geo_name <- tolower(as.character(main.candidates.condensed$geo_name))
# Gets rid of 'county' and leaves only the name of the county to match the county.regions data
main.candidates.condensed$geo_name <- gsub(' [A-z ]*', '' , main.candidates.condensed$geo_name)
# Loads county.regions data
data("county.regions")
# Creates a new variable 'all.regions' that is only the county.names and fips codes
all.regions <- select(county.regions, 'geo_name' = county.name, 'region' = region)
# Joins all.regions with main.candidates.condensed
df <- left_join(main.candidates.condensed, all.regions)
names(df)[2] <- "county"
# Sets the fips of Olgaga county to '46113' because it was the wrong fips code
df[2383, "region"] <- 46113
# Add a new column to show each county's winner
df$winner <- as.factor(ifelse(df$trump_pct > df$clinton_pct, "Trump", "Clinton"))
# Creates a column named 'value' that is the 'winner' column
df$value = df$winner
library(shiny)
library(dplyr)
View(df)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
# Reads in the data into a .csv
setwd("/Users/David/Documents/INFO201/info201Group")
presidential.county.data <- read.csv("data/presidential_general_election_2016_by_county_David.csv")
# Reads in the data into a .csv
setwd("/Users/David/Documents/INFO201/info201Group")
presidential.county.data <- read.csv("data/presidential_general_election_2016_by_county_David.csv")
# Creates a vector of the two candidates
candidates <- c("H. Clinton", "D. Trump")
# Creates a new dataframe of the filtere
main.candidates <- presidential.county.data %>%
filter(name %in% candidates)
# Creates a sub-list of National, and sub-list of States into one list of choices
all.choices <- list("National" = "national", States = unique(main.candidates$state))
# Condenses the data to get rid of duplicates
main.candidates.condensed <- dcast(main.candidates, fips + geo_name + state ~ name, sum)
# Renames the 'fips' column to 'region'
names(main.candidates.condensed)[1] <- "region"
# Renames the 'D. Trump' column to 'trump'
names(main.candidates.condensed)[4] <- "trump"
# Renames the 'H. Clinton' column to 'clinton'
names(main.candidates.condensed)[5] <- "clinton"
# Adds a new column that is the total amount of votes for Trump & Clinton
main.candidates.condensed <- mutate(main.candidates.condensed, total = trump + clinton)
# Adds two new columns that is the percentages of votes for Trump and for Clinton
main.candidates.condensed <- mutate(main.candidates.condensed, trump_pct = round((trump/total)*100),
clinton_pct = round((clinton/total) * 100))
# Sets the county names to lowercase to match the county.regions data
main.candidates.condensed$geo_name <- tolower(as.character(main.candidates.condensed$geo_name))
# Gets rid of 'county' and leaves only the name of the county to match the county.regions data
main.candidates.condensed$geo_name <- gsub(' [A-z ]*', '' , main.candidates.condensed$geo_name)
# Loads county.regions data
data("county.regions")
# Creates a new variable 'all.regions' that is only the county.names and fips codes
all.regions <- select(county.regions, 'geo_name' = county.name, 'region' = region)
# Joins all.regions with main.candidates.condensed
df <- left_join(main.candidates.condensed, all.regions)
names(df)[2] <- "county"
# Sets the fips of Olgaga county to '46113' because it was the wrong fips code
df[2383, "region"] <- 46113
# Add a new column to show each county's winner
df$winner <- as.factor(ifelse(df$trump_pct > df$clinton_pct, "Trump", "Clinton"))
# Creates a column named 'value' that is the 'winner' column
df$value = df$winner
main.candidates.condensed <- dcast(main.candidates, fips + geo_name + state ~ name, sum)
library(reshape2)
# Reads in the data into a .csv
setwd("/Users/David/Documents/INFO201/info201Group")
presidential.county.data <- read.csv("data/presidential_general_election_2016_by_county_David.csv")
# Creates a vector of the two candidates
candidates <- c("H. Clinton", "D. Trump")
# Creates a new dataframe of the filtere
main.candidates <- presidential.county.data %>%
filter(name %in% candidates)
# Creates a sub-list of National, and sub-list of States into one list of choices
all.choices <- list("National" = "national", States = unique(main.candidates$state))
# Condenses the data to get rid of duplicates
main.candidates.condensed <- dcast(main.candidates, fips + geo_name + state ~ name, sum)
# Renames the 'fips' column to 'region'
names(main.candidates.condensed)[1] <- "region"
# Renames the 'D. Trump' column to 'trump'
names(main.candidates.condensed)[4] <- "trump"
# Renames the 'H. Clinton' column to 'clinton'
names(main.candidates.condensed)[5] <- "clinton"
# Adds a new column that is the total amount of votes for Trump & Clinton
main.candidates.condensed <- mutate(main.candidates.condensed, total = trump + clinton)
# Adds two new columns that is the percentages of votes for Trump and for Clinton
main.candidates.condensed <- mutate(main.candidates.condensed, trump_pct = round((trump/total)*100),
clinton_pct = round((clinton/total) * 100))
# Sets the county names to lowercase to match the county.regions data
main.candidates.condensed$geo_name <- tolower(as.character(main.candidates.condensed$geo_name))
# Gets rid of 'county' and leaves only the name of the county to match the county.regions data
main.candidates.condensed$geo_name <- gsub(' [A-z ]*', '' , main.candidates.condensed$geo_name)
# Loads county.regions data
data("county.regions")
# Creates a new variable 'all.regions' that is only the county.names and fips codes
all.regions <- select(county.regions, 'geo_name' = county.name, 'region' = region)
# Joins all.regions with main.candidates.condensed
df <- left_join(main.candidates.condensed, all.regions)
names(df)[2] <- "county"
# Sets the fips of Olgaga county to '46113' because it was the wrong fips code
df[2383, "region"] <- 46113
# Add a new column to show each county's winner
df$winner <- as.factor(ifelse(df$trump_pct > df$clinton_pct, "Trump", "Clinton"))
# Creates a column named 'value' that is the 'winner' column
df$value = df$winner
runApp('tab1')
runApp('tab1')
shinyServer(function(input, output) {
output$map <- renderPlot({
# Reads in the data into a .csv
setwd("/Users/David/Documents/INFO201/info201Group")
presidential.county.data <- read.csv("data/presidential_general_election_2016_by_county_David.csv")
# Creates a vector of the two candidates
candidates <- c("H. Clinton", "D. Trump")
# Creates a new dataframe of the filtere
main.candidates <- presidential.county.data %>%
filter(name %in% candidates)
# Creates a sub-list of National, and sub-list of States into one list of choices
all.choices <- list("National" = "national", States = unique(main.candidates$state))
# Condenses the data to get rid of duplicates
main.candidates.condensed <- dcast(main.candidates, fips + geo_name + state ~ name, sum)
# Renames the 'fips' column to 'region'
names(main.candidates.condensed)[1] <- "region"
# Renames the 'D. Trump' column to 'trump'
names(main.candidates.condensed)[4] <- "trump"
# Renames the 'H. Clinton' column to 'clinton'
names(main.candidates.condensed)[5] <- "clinton"
# Adds a new column that is the total amount of votes for Trump & Clinton
main.candidates.condensed <- mutate(main.candidates.condensed, total = trump + clinton)
# Adds two new columns that is the percentages of votes for Trump and for Clinton
main.candidates.condensed <- mutate(main.candidates.condensed, trump_pct = round((trump/total)*100),
clinton_pct = round((clinton/total) * 100))
# Sets the county names to lowercase to match the county.regions data
main.candidates.condensed$geo_name <- tolower(as.character(main.candidates.condensed$geo_name))
# Gets rid of 'county' and leaves only the name of the county to match the county.regions data
main.candidates.condensed$geo_name <- gsub(' [A-z ]*', '' , main.candidates.condensed$geo_name)
# Loads county.regions data
data("county.regions")
# Creates a new variable 'all.regions' that is only the county.names and fips codes
all.regions <- select(county.regions, 'geo_name' = county.name, 'region' = region)
# Joins all.regions with main.candidates.condensed
df <- left_join(main.candidates.condensed, all.regions)
names(df)[2] <- "county"
# Sets the fips of Olgaga county to '46113' because it was the wrong fips code
df[2383, "region"] <- 46113
# Add a new column to show each county's winner
df$winner <- as.factor(ifelse(df$trump_pct > df$clinton_pct, "Trump", "Clinton"))
# Creates a column named 'value' that is the 'winner' column
df$value = df$winner
runApp('tab1')
